onstart:
    # print("##### TEST #####\n") 
    # print("\t Creating jobs output subfolders...\n")
    shell("mkdir -p jobs/viral_calling")

configfile: "profile/config.yaml"
SAMPLES, = glob_wildcards("/groups/cgsd/dcmorgan/PRJNA544527/ftp/{sample}_1.fastq.gz")

rule all:
    input:
        expand("{sample}_{num}.fastq.gz", sample=SAMPLES, num=['1', '2'])
    output:
        
        
# def get_input_fastqs(wildcards):
    # return config["samples"][wildcards.sample]

rule run_assemble_and_mpa:
    input:
        # "data/genome.fa", ## file 
        # get_input_fastqs ## function
        "{sample}"
    output:
        A= protected("~/assemble/{sample}.fa"),
        B= protected("~/m_out/{sample}.txt"),
        C= temp("~/epi_metaphlan_out/{sample}.bowtie2.bz2"),
        D= temp("~/epi_sam_out/{sample}.sam")

    # params:
    #     rg=r"@RG\tID:{sample}\tSM:{sample}"
    log:
        "logs/{sample}.log"
    threads: 8
    singularity: "singularities/viral_calling.sif"

    shell:
        "megahit -1 clean_data/{input.A} -2 clean_data/{input.B} -t {threads} -o {output.A}"
        "metaphlan no_duplicated/{input.A},no_duplicated/{input.B} --bowtie2out {output.C} --nproc {threads} --input_type fastq -o {output.B} -t rel_ab_w_read_stats -s {output.D}"


rule run_dvf:
    input:
        "~/assemble/{sample}.fa"
    output:
        protected("~/dvf_out/{sample}.txt")
    log:
        "logs/{sample}.log"
    singularity: "singularities/viral_calling.sif"
    params:
        rg=r"@RG\tLEN:{500}"
    threads: 12
    shell:
        "python ~/DeepVirFinder/dvf.py -i {input} -l '{params.rg}' -c {threads}"



rule run_prodigal:
    input:
        "~/assemble/{sample}/final.contigs.fa_gt{params}bp_dvfpred.txt"
    output:
        protected("~/assemble/{sample}/final_contigs.fna")
    log:
        "logs/{sample}.log"
    params:
        rg=r"@RG\tLEN:{500}"
    singularity: "singularities/viral_calling.sif"
    script:
        "scripts/run_prodigal.py"


rule run_blastp:
    input: 
        A= "~/assemble/{sample}/final_contigs.fna",
        B= "/groups/cgsd/dcmorgan/virusdb/refseq_viral_db"
    output:
        protected("~/assemble/{sample}/viral_hits.blast")
    log:
        "logs/{sample}.log"
    singularity: "singularities/viral_calling.sif"
    shell:
        "blastp -query {input.A} -db {input.B} -out {output} -outfmt 6"
  

rule filter_blast:
    input:
        "~/assemble/{sample}/final_contigs.fa"
    output:
        temp("~/assemble/{sample}/blast_contigs.fa")
    log:
        "logs/{sample}.log"
    singularity: "singularities/viral_calling.sif"
    script:
        "scripts/filter_blast.py"


rule run_bbmap:
    input:
        "~/assemble/{sample}/blast_contigs.fa"
    output:
        A= temp("assemble/{sample}/blast_contigs.faa"),
        B= temp("assemble/{sample}/build_v"),
        C= protected("assemble/{sample}/eg2.sam"),
        D= temp("assemble/{sample}/aln.bam"),
        E= temp("assemble/{sample}/sorted_aln.bam"),
        F= protected("temp(assemble/{sample}/idxstats.txt")
    singularity: "singularities/viral_calling.sif"
    shell:
        "tr ',' '\n' < {input} > {output.A}"
        "bowtie2-build {output.A} {output.B}"
        "bowtie2 -x {output.B} -1 {input.A} -2 {input.B} -S {output.C}"
        "samtools view -bS {output.C} > {output.D}"
        "samtools sort {output.D} -o {output.E}"
        "samtools idxstats {output.E} > {output.F}"

rule get_count_table:
    input:
        "assemble/{sample}/idxstats.txt"
    output:
        protected("assemble/contig_counts.tsv")
    run:
        import pandas as pd
        R=glob.glob(input)
        for i,j in enumerate(R):
            AA=pd.read_csv(j,sep='\t',index_col=0,header=None)
            BB=pd.DataFrame(AA[2]+AA[3])
            jeff=os.path.basename(j).split('.')[0]
            BB.rename(columns={'0':jeff})
            if i==0:
                CC=pd.DataFrame(BB)
            else:
                CC=pd.merge(CC,BB,how='outer',left_index=True, right_index=True)
        CC.to_csv(output,sep='\t')

# rule plot_abundance:
#     input:
#         "assemble/contig_counts.tsv"
#     output:
#         A= protected("assemble/{sample}/box_plot.png"),
#         B= protected("assemble/{sample}/abundance_plot.png"),
#         C= protected("assemble/{sample}/eco_plot.png")

#     script:
#         "scripts/plot_abundance.py"
        
    
    
### ml snakemake
### cd snakemake_viral_calling/ 
### snakemake --profile profile/ --use-singularity